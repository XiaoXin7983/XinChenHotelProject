<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 读取数据库相关信息的配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 1. 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置数据库连接 -->
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置连接池 -->
        <!-- 初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="3"></property>
        <!-- 连接池中保留的最小连接数。Default: 3 -->
        <property name="minPoolSize" value="3"></property>
        <!-- 连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="15"></property>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="3"></property>
        <!-- 最大空闲时间，1800秒内未使用则连接被丢弃，若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="1800"></property>
        <!-- 获取连接超时的时间 -->
        <property name="checkoutTimeout" value="10000" />
        <!-- 获取连接失败时的重试次数 -->
        <property name="acquireRetryAttempts" value="2" />
    </bean>
    <!-- 2. 配置session工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 读取mybatis配置文件, 也可以不读取. -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml" />-->
        <!-- 引入mapper映射文件 -->
        <!--<property name="mapperLocations" value="classpath:com/dao/*.xml"></property>-->
    </bean>

    <!-- 3. 依赖注入 -->
    <!-- 配置转换器,对于在basePackage中设置的包(包括子包)下的接口，
        如果在Mapper.xml文件中定义过,	将被转换成spring的bean(实例对象)，
        再将转换好的bean通过@Autowired注解向对应的接口对象注入-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 不使用db.properties文件时, 使用此配置方式 -->
        <!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
        <!-- 使用db.properties文件时, 使用此配置方式 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- value的内容是mapper.xml所在的包名 -->
        <property name="basePackage" value="com.dao"/>
    </bean>

    <!-- 4. 声明式事务管理aop -->
    <!-- 1.配置事务管理器,管理数据源事务处理 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 2.配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 
				REQUIRED：意思就是此方法需要事务管理，如果对应的方法没有开启一个事务，就开启一个新事务
						  如果已经开启了一个事务，那就延续之前事务的状态
			    rollback-for：意思就是回滚，什么时候回滚呢？后面的值告诉我们此方法遇到异常的回滚，撤销之前
				              所有执行的sql语句。
			-->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
            <!-- 支持当前事务，如果当前没有事务，就以非事务方式执行 -->
            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!-- 3.配置切面织入的范围 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.service.impl.*.*(..))" />
    </aop:config>
</beans>











